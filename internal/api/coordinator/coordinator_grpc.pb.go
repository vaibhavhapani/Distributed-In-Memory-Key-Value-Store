// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: coordinator.proto

package coordinator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatorAPIClient is the client API for CoordinatorAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorAPIClient interface {
	AddStore(ctx context.Context, in *AddStoreRequest, opts ...grpc.CallOption) (*AddStoreResponse, error)
	RemoveStore(ctx context.Context, in *RemoveStoreRequest, opts ...grpc.CallOption) (*RemoveStoreResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type coordinatorAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorAPIClient(cc grpc.ClientConnInterface) CoordinatorAPIClient {
	return &coordinatorAPIClient{cc}
}

func (c *coordinatorAPIClient) AddStore(ctx context.Context, in *AddStoreRequest, opts ...grpc.CallOption) (*AddStoreResponse, error) {
	out := new(AddStoreResponse)
	err := c.cc.Invoke(ctx, "/coordinator.CoordinatorAPI/AddStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorAPIClient) RemoveStore(ctx context.Context, in *RemoveStoreRequest, opts ...grpc.CallOption) (*RemoveStoreResponse, error) {
	out := new(RemoveStoreResponse)
	err := c.cc.Invoke(ctx, "/coordinator.CoordinatorAPI/RemoveStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorAPIClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/coordinator.CoordinatorAPI/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorAPIClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, "/coordinator.CoordinatorAPI/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorAPIClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/coordinator.CoordinatorAPI/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorAPIServer is the server API for CoordinatorAPI service.
// All implementations must embed UnimplementedCoordinatorAPIServer
// for forward compatibility
type CoordinatorAPIServer interface {
	AddStore(context.Context, *AddStoreRequest) (*AddStoreResponse, error)
	RemoveStore(context.Context, *RemoveStoreRequest) (*RemoveStoreResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedCoordinatorAPIServer()
}

// UnimplementedCoordinatorAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorAPIServer struct {
}

func (UnimplementedCoordinatorAPIServer) AddStore(context.Context, *AddStoreRequest) (*AddStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStore not implemented")
}
func (UnimplementedCoordinatorAPIServer) RemoveStore(context.Context, *RemoveStoreRequest) (*RemoveStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveStore not implemented")
}
func (UnimplementedCoordinatorAPIServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCoordinatorAPIServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedCoordinatorAPIServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCoordinatorAPIServer) mustEmbedUnimplementedCoordinatorAPIServer() {}

// UnsafeCoordinatorAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorAPIServer will
// result in compilation errors.
type UnsafeCoordinatorAPIServer interface {
	mustEmbedUnimplementedCoordinatorAPIServer()
}

func RegisterCoordinatorAPIServer(s grpc.ServiceRegistrar, srv CoordinatorAPIServer) {
	s.RegisterService(&CoordinatorAPI_ServiceDesc, srv)
}

func _CoordinatorAPI_AddStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorAPIServer).AddStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.CoordinatorAPI/AddStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorAPIServer).AddStore(ctx, req.(*AddStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorAPI_RemoveStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorAPIServer).RemoveStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.CoordinatorAPI/RemoveStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorAPIServer).RemoveStore(ctx, req.(*RemoveStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorAPI_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorAPIServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.CoordinatorAPI/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorAPIServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorAPI_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorAPIServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.CoordinatorAPI/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorAPIServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoordinatorAPI_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorAPIServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coordinator.CoordinatorAPI/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorAPIServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinatorAPI_ServiceDesc is the grpc.ServiceDesc for CoordinatorAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.CoordinatorAPI",
	HandlerType: (*CoordinatorAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStore",
			Handler:    _CoordinatorAPI_AddStore_Handler,
		},
		{
			MethodName: "RemoveStore",
			Handler:    _CoordinatorAPI_RemoveStore_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CoordinatorAPI_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _CoordinatorAPI_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CoordinatorAPI_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
